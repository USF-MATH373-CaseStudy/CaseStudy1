# Reading TCGA data
tcga <- read.delim("TCGA_example.txt", header = T, sep = " ")
Tumor.Type <- tcga[, 1]
X <- model.matrix(Gene.1 ~., data = tcga)[, -1]
y <- tcga$Gene.1
# Set seed for reproducability
set.seed(1)
# Split data into training and test sets
train <- sample(1:nrow(X), nrow(X) * 0.8)
test <- (-train)
X_train <- X[train,]
X_test <- X[test,]
y_train <- y[train]
y_test <- y[test]
# Perform PCA on the training set
pr.out <- prcomp(X_train, scale = TRUE)
# Plot the scree plots
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
par(mfrow = c(1,2))
plot(pve, xlab = "Principal Component", ylab = "Proportion of Variance Explained")
plot(cumsum(pve),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b", xlim = c(1, 50))
# Find the number of PCs needed to explain 0.85 of the total variation X
minPC <- min(which(cumsum(pve) >= 0.85))
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title,
col = c("green3", "blue")[unclass(Tumor.Type)])
pairs_pc
tcga[, -1]
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.col <- character(nrow(tcga))
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title,
col = c("green3", "blue")[unclass(Tumor.Type)])
# Reading TCGA data
tcga <- read.delim("TCGA_example.txt", header = T, sep = " ")
Tumor.Type <- tcga$Tumor.Type
X <- model.matrix(Gene.1 ~., data = tcga[, -1])[, -1]
y <- tcga$Gene.1
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.col <- character(nrow(tcga))
cols[iris$Species %in% c("setosa","versicolor")] <- "blue"
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Tumor.Type == "Basal"] <- "green3"
scatter.cols[tcga$Tumor.Type == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title,
col = c("green3", "blue")[unclass(Tumor.Type)])
# Set seed for reproducability
set.seed(1)
# Split data into training and test sets
train <- sample(1:nrow(X), nrow(X) * 0.8)
test <- (-train)
X_train <- X[train,]
X_test <- X[test,]
y_train <- y[train]
y_test <- y[test]
# Perform PCA on the training set
pr.out <- prcomp(X_train, scale = TRUE)
# Plot the scree plots
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
par(mfrow = c(1,2))
plot(pve, xlab = "Principal Component", ylab = "Proportion of Variance Explained")
plot(cumsum(pve),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b", xlim = c(1, 50))
# Find the number of PCs needed to explain 0.85 of the total variation X
minPC <- min(which(cumsum(pve) >= 0.85))
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Tumor.Type == "Basal"] <- "green3"
scatter.cols[tcga$Tumor.Type == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title,
col = c("green3", "blue")[unclass(Tumor.Type)])
pairs_pc
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Tumor.Type == "Basal"] <- "green3"
scatter.cols[tcga$Tumor.Type == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title,
col = scatter.cols)
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Tumor.Type == "Basal"] <- "green3"
scatter.cols[tcga$Tumor.Type == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
scatter.cols
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[] <- "black"
scatter.cols[tcga$Tumor.Type == "Basal"] <- "green3"
scatter.cols[tcga$Tumor.Type == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[] <- "black"
scatter.cols[tcga$Tumor.Type == "Basal"] <- "green3"
scatter.cols[tcga$Tumor.Type == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title)
tcga$Tumor.Type
# Reading TCGA data
tcga <- read.delim("TCGA_example.txt", header = T, sep = " ")
Tumor.Type <- tcga[, 1]
X <- model.matrix(Gene.1 ~., data = tcga[, -1])[, -1]
y <- tcga$Gene.1
# Set seed for reproducability
set.seed(1)
# Split data into training and test sets
train <- sample(1:nrow(X), nrow(X) * 0.8)
test <- (-train)
X_train <- X[train,]
X_test <- X[test,]
y_train <- y[train]
y_test <- y[test]
# Perform PCA on the training set
pr.out <- prcomp(X_train, scale = TRUE)
# Plot the scree plots
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
par(mfrow = c(1,2))
plot(pve, xlab = "Principal Component", ylab = "Proportion of Variance Explained")
plot(cumsum(pve),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b", xlim = c(1, 50))
# Find the number of PCs needed to explain 0.85 of the total variation X
minPC <- min(which(cumsum(pve) >= 0.85))
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[] <- "black"
scatter.cols[tcga$Tumor.Type == "Basal"] <- "green3"
scatter.cols[tcga$Tumor.Type == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
tcga[, 1]
tcga$Tumor.Type
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[] <- "black"
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
# Reading TCGA data
tcga <- read.delim("TCGA_example.txt", header = T, sep = " ")
Tumor.Type <- tcga$Subtype
X <- model.matrix(Gene.1 ~., data = tcga[, -1])[, -1]
y <- tcga$Gene.1
# Set seed for reproducability
set.seed(1)
# Split data into training and test sets
train <- sample(1:nrow(X), nrow(X) * 0.8)
test <- (-train)
X_train <- X[train,]
X_test <- X[test,]
y_train <- y[train]
y_test <- y[test]
# Perform PCA on the training set
pr.out <- prcomp(X_train, scale = TRUE)
# Plot the scree plots
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
par(mfrow = c(1,2))
plot(pve, xlab = "Principal Component", ylab = "Proportion of Variance Explained")
plot(cumsum(pve),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b", xlim = c(1, 50))
# Find the number of PCs needed to explain 0.85 of the total variation X
minPC <- min(which(cumsum(pve) >= 0.85))
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[] <- "black"
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
scatter.cols
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:4]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
?pairs
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:10]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(data = pairs_pc, main = scatter.title, col = scatter.cols)
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:10]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:10]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- PC1 + PC2 + PC3 + PC4
# Extract the first 4 PCs
pairs_pc <- pr.out$x[, 1:10]
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
# Extract the first 4 PCs
pairs_pc <- pr.out$x
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
# Extract the first 4 PCs
pairs_pc <- pr.out$x
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
# Extract the first 4 PCs
pairs_pc <- pr.out$x
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
# Extract the first 4 PCs
pairs_pc <- pr.out$x
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
# Extract the first 4 PCs
pairs_pc <- pr.out$x
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
# Extract the PCs
pairs_pc <- pr.out$x
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
knitr::opts_chunk$set(echo = TRUE)
library(png)
library(grid)
library(pls)
setwd("/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/Homework/Hmk2")
# Reading TCGA data
tcga <- read.delim("TCGA_example.txt", header = T, sep = " ")
Tumor.Type <- tcga$Subtype
X <- model.matrix(Gene.1 ~., data = tcga[, -1])[, -1]
y <- tcga$Gene.1
# Set seed for reproducability
set.seed(1)
# Split data into training and test sets
train <- sample(1:nrow(X), nrow(X) * 0.8)
test <- (-train)
X_train <- X[train,]
X_test <- X[test,]
y_train <- y[train]
y_test <- y[test]
# Perform PCA on the training set
pr.out <- prcomp(X_train, scale = TRUE)
# Plot the scree plots
pr.var <- pr.out$sdev^2
pve <- pr.var / sum(pr.var)
par(mfrow = c(1,2))
plot(pve, xlab = "Principal Component", ylab = "Proportion of Variance Explained")
plot(cumsum(pve),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b", xlim = c(1, 50))
# Find the number of PCs needed to explain 0.85 of the total variation X
minPC <- min(which(cumsum(pve) >= 0.85))
# Extract the PCs
pairs_pc <- pr.out$x
# Plot a pairwise scatter plot of the first 4 PCs
scatter.formula <- ~ PC1 + PC2 + PC3 + PC4
scatter.title <- "Pairwise Relationships between the First 4 PCs"
scatter.cols <- character(nrow(tcga))
scatter.cols[tcga$Subtype == "Basal"] <- "green3"
scatter.cols[tcga$Subtype == "Normal"] <- "blue"
pairs(formula = scatter.formula, data = pairs_pc, main = scatter.title, col = scatter.cols)
?pcr
pcr.fit <- pcr(Gene.1 ~ ., data = X_train, scale = TRUE, validation = "CV")
pcr.fit <- pcr(Gene.1 ~ ., data = as.data.frame(X_train), scale = TRUE, validation = "CV")
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
View(pcr.fit)
View(pcr.fit)
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSPE")
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP")
pcr.fit$ncomp
head(pcr.fit)
str(pcr.fit)
View(pcr.fit)
?validationplot
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
?pcr.tune
View(pcr.fit)
View(pcr.fit)
?validationplot
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
pcr.plot <- validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
?validationplot
?MSPE
?MSEP
MSEP
MSEP(pcr.fit)
which(min(MSEP(pcr.fit)$CV))
MSEP(pcr.fit)$CV
MSEP(pcr.fit)[, 1]
MSEP(pcr.fit)[1, ]
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
mspe <- MSEP(pcr.fit)
View(mspe)
View(mspe)
MSEP(pcr.fit)$val
mspe <- MSEP(pcr.fit)$val
mspe
mspe[1, 1, ]
mspe <- MSEP(pcr.fit)$val[1, 1, ]
which.min(mspe)
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
min.mspe <- which.min(MSEP(pcr.fit)$val[1, 1, ]) - 1
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
min.mspe <- which.min(unname(MSEP(pcr.fit)$val[1, 1, ])) - 1
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
min.mspe <- which.min(MSEP(pcr.fit)$val[1, 1, ]) - 1
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
min.mspe <- which.min(MSEP(pcr.fit)$val[1, 1, ]) - 1
# Find the optimal amount of PCs
min.mspe <- which.min(MSEP(pcr.fit)$val[1, 1, ]) - 1
# Set seed for reproducability
set.seed(1)
# Fit PCR across a number of PCs
pcr.fit <- pcr(Gene.1 ~ ., data = tcga, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
# Find the optimal amount of PCs
min.mspe <- which.min(MSEP(pcr.fit)$val[1, 1, ]) - 1
# Predict the values on the test set
pcr.pred <- predict(pcr.fit, X_test, ncomp = min.mspe)
# Set seed for reproducability
set.seed(1)
# Fit PCR across a number of PCs
pcr.fit <- pcr(Gene.1 ~ ., data = tcga[, -1], subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP", xlab = "Number of PCs", ylab = "MSPE")
# Find the optimal amount of PCs
min.mspe <- which.min(MSEP(pcr.fit)$val[1, 1, ]) - 1
# Predict the values on the test set
pcr.pred <- predict(pcr.fit, X_test, ncomp = min.mspe)
# Calculate the MSPE
mean((pcr.pred - y_test) ^ 2)
# Predict the values on the test set
pcr.pred <- predict(pcr.fit, X_test, ncomp = min.mspe)
# Calculate the MSPE
test_mspe <- mean((pcr.pred - y_test) ^ 2)
# Predict the values on the test set
pcr.pred <- predict(pcr.fit, X_test, ncomp = min.mspe)
# Calculate the MSPE
test_mspe <- mean((pcr.pred - y_test) ^ 2)
getwd()
dirname()
dirname(sys.frame(1)$ofile)
?source
# Import function
source("func.R")
# Set directory to folder containing training data
training.directory <- "/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/CaseStudy/SPAMData/TRAINING"
setwd(training.directory)
# Import function
source("func.R")
getwd()
# Set directory to folder containing training data
training.directory <- "/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/CaseStudy/SPAMData/TRAINING"
setwd(training.directory)
# Import function
source("func.R")
# Import function
source("func.R")
# Set directory to folder containing training data
training.directory <- "/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/CaseStudy/CaseStudy1/SPAMData/TRAINING"
setwd(training.directory)
# Import function
source("func.R")
# Set working directory
setwd("/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/CaseStudy")
# Set directory to folder containing training data
training.directory <- "/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/CaseStudy/CaseStudy1/SPAMData/TRAINING"
# Import function
source("code/func.R")
# Import function
source("/code/func.R")
source
?source
# Set working directory
wd <- "/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/CaseStudy"
setwd(wd)
# Set directory to folder containing training data
training.directory <- paste(wd, "/CaseStudy1/SPAMData/TRAINING", sep = "")
training.directory
# Load training and test files from the SPAM data set
training.names <- list.files(training.directory)
# Load each email using the above file.names
training.emails <- list()
for (i in 1:length(training.names)){
training.emails[[i]] <- readLines(training.names[i])
}
# Set working directory
wd <- "/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/MATH_373/CaseStudy"
# Set directory to folder containing training data
training.dir <- paste(wd, "/CaseStudy1/SPAMData/TRAINING", sep = "")
setwd(training.dir)
# Load training and test files from the SPAM data set
training.names <- list.files(training.dir)
# Load each email using the above file.names
training.emails <- list()
for (i in 1:length(training.names)){
training.emails[[i]] <- readLines(training.names[i])
}
for (i in 1:length(training.names)){
training.emails[[i]] <- readLines(training.names[i])
}
